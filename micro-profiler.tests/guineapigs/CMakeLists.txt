cmake_minimum_required(VERSION 2.8)

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fvisibility=hidden")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od")
endif()

if(UNIX)
	add_library(symbol_container_1 SHARED symbol_container_1.cpp symbol_container_1.expmap)
	add_library(symbol_container_2 SHARED symbol_container_2.cpp symbol_container_2_internal.cpp symbol_container_2.expmap)
	add_library(symbol_container_3_nosymbols SHARED symbol_container_3.cpp symbol_container_3.expmap)
elseif(WIN32)
	add_library(symbol_container_1 SHARED symbol_container_1.cpp symbol_container_1.def)
	add_library(symbol_container_2 SHARED symbol_container_2.cpp symbol_container_2_internal.cpp symbol_container_2.def)
	add_library(symbol_container_3_nosymbols SHARED symbol_container_3.cpp symbol_container_3.def)
endif()

if(MSVC)
	set_target_properties(symbol_container_1 PROPERTIES LINK_FLAGS "/INCREMENTAL:NO")
	set_target_properties(symbol_container_2 PROPERTIES LINK_FLAGS "/INCREMENTAL:NO")
	set_target_properties(symbol_container_3_nosymbols PROPERTIES LINK_FLAGS "/INCREMENTAL:NO")
	set_target_properties(symbol_container_3_nosymbols PROPERTIES LINK_FLAGS "/DEBUG:NONE")
endif()
